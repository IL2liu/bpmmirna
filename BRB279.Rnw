%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%CODI PEL MEDI DE CONSERVACIO Frest Frozen%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<include=FALSE>>=
opts_chunk$set(fig.path='images/grafic', tidy=FALSE, echo=FALSE, print=FALSE)
@
\documentclass[a4paper]{article}

\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{underscore}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}

\newcommand{\etal}{\emph{et alt.}}
\newcommand{\Rpackage}[1]{{\texttt{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}
\newcommand{\Rfun}[1]{{\texttt{#1}}}

\newcommand{\R}{{\it R}}


\title{An\'alisis estad\'istico para la selecci\'on \\ 
       de miRNAs diferencialmente expresados \\ 
       tras un infarto cerebral, en diferentes regiones \\
       del cerebro. UEB ID: A-XXXX}

\author{Ricardo Gonzalo y Alex Sánchez}

\bibliographystyle{plain}

\begin{document}
\setkeys{Gin}{width=0.7\textwidth} % Sets default width for R-Sweave generated figures

\maketitle
\newpage
\tableofcontents
\newpage
\section{Introducci\'on}

\subsection{Objetivos}

El principal objetivo de este estudio es encontrar miRNAs diferencialmente expresados en muestras procedentes de tres regiones de necropsias de cerebro, en pacientes que habían fallecido debido a un infarto cerebral o ictus. Las tres zonas del cerebro que se estudian son las siguientes:
\begin {itemize}
  \item Contralateral (CL): zona del cerebro sana, alejada del lugar del infarto.
  \item Periinfarto (PI): zona de alrededor del infarto.
  \item Infarto (IC): zona donde ha ocurrido el infarto.
\end {itemize}

\subsubsection{Condiciones Experimentales}
Las condiciones experimentales a considerar en este estudio son las siguientes:
\begin{enumerate}
  \item Zona de estudio:
    \begin{itemize}
      \item Periinfarto (PI)
      \item Contralateral (CL)
      \item Infarto (IC)
    \end{itemize}
  \item Conservación del tejido:
    \begin{itemize}
      \item Tejido fresco (FF)
      \item Tejido conservado en parafina (FFPE)
      \item Tejido conservado en paraformaldehido (PFA)
    \end{itemize}
\end{enumerate}

\subsection{An\'alisis}

El an\'alisis se ha realizado siguiendo un \textbf{``pipeline''} más o
menos estándar de an\'alisis de datos de microarrays, adaptado a este
estudio en particular.  En l\'ineas generales cada apartado de los
siguientes se corresponde con una secci\'on de este informe.
\begin{enumerate}
\item Obtención de los datos.
\item Control de Calidad: Se valora la calidad individual y global de
  los arrays. 
\item Preprocesado de los datos: En general consiste en la
  sumarizaci\'on, normalizaci\'on y filtraje. En este caso los datos
  se han proporcionado ya normalizados, por lo que tan sólo se añade
  el filtraje.
\item Selecci\'on de genes diferencialmente expresados para cada una de las condiciones descritas.
\item B\'usqueda de patrones de expresi\'on comunes y agrupaci\'on de las muestras.
\item Anotaci\'on de los resultados y visualización de patrones de expresión.
\end{enumerate}


En \textit{Bioinformatics and Computational Biology Solutions using
  {R} and Bioconductor, Gentleman R et al, Springer (2005)} (\cite{Gentleman:2005}) se pueden
encontrar descritos los m\'etodos utilizados para procesar, analizar e
interpretar los datos. Para realizar este estudio se ha utilizado el
software {R} y los paquetes apropiados del Proyecto Bioconductor
(\textit{www.bioconductor.org})

\subsection{Archivos y presentación de resultados}

El estudio realizado genera una considerable cantidad de
archivos. Para facilitar su revisión se proporciona un archivo
comprimido que, al extraerlo, contiene un archivo
\texttt{Results.html} (que puede abrirse con un navegador como CHROME
o EXPLORER) y que da acceso a los distintos archivos generados en el
proceso del an\'alisis agrupados por categorías (información, datos,
control de calidad, análisis, anotación).

Las tablas de resultados se proporcionan en formato html y en formato
CSV (``comma separated values'') que pueden abrirse con una hoja de
cálculo indicando que los separadores son comas (``,'').

<<preparaDirectorios>>=
workingDir <-getwd()
dataDir <-file.path(workingDir, "/dades")
resultsDir <- file.path(workingDir, "/results")
codeDir <-file.path(workingDir,"Rcode")
setwd(resultsDir)
@

<<nombreArchivos>>=
MainReportName  <- "MainReport.pdf"         # Nom de l'arxiu MainReport
StudyProposal   <- "StudyProposal.pdf"      # Nom de l'arxiu de la proposta
linksFileName   <- "enlaces.txt"
targetsFileName <- "targets.csv"
dataFileName <- "rma.csv"
QCFileName <- "QualityControl/index.html"
#annotationsFileName <- "HTA_annotations_BM.csv"
#vennFileName <- "VennDiagrams.pdf"
volcanosFileName <- "Volcanos.pdf"
venn1FileName <- "Venn.tif"
BoxplotFileName<-"BoxPlot.pdf"
HClusterFileName<-"HClust.pdf"
PCAAreaFileName<-"PCAplotArea.pdf"
PCAMethodFileName<-"PCAplotMethod.pdf"
@ 


<<InstallifNot,echo=FALSE,message=FALSE>>=
installifnot <- function (pkg){
  if (!require(pkg, character.only=T)){
  source("http://bioconductor.org/biocLite.R")
  biocLite(pkg)
}else{
  require(pkg, character.only=T)
  }
}
installifnot("Biobase")
require(Biobase)
require(pvca)
installifnot("arrayQualityMetrics")
installifnot("genefilter")
installifnot("org.Hs.eg.db")
installifnot("multtest")
installifnot("annotate")
installifnot("xtable")
installifnot("GOstats")
installifnot("gplots")
installifnot("scatterplot3d")
installifnot("VennDiagram")
source(file.path("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A/Rcode", "AnalysisFunctions2Pack.R"))
if(!file.exists(linksFileName)) createLinksFile(linksFileName)
@ 

<<informes>>=
addToLinksFile(linksFileName,
               StudyProposal,
               categ = 'INFO', 
               desc = "Study Proposal")

addToLinksFile(linksFileName,
               MainReportName,
               categ = 'INFO', 
               desc = "Report with description of the main results")
@ 

\section{Obtención y lectura de los datos}

Para un análisis de datos de microarrays de Affymetrix se necesitan los archivos 
de imágenes escaneadas (``.CEL'') y un archivo en el que se asigne una condición 
experimental a cada archivo (archivo ``targets'').

\subsection{Los datos}

Los archivos .CEL han sido procesados con el software ``Expression
Console'' de Affymetrix que ha permitido leerlos y normalizarlos
utilizando el algoritmo RMA (\cite{Irizarry2003}) el habitual para este tipo de arrays.

Los datos normalizados se encuentran almacenados en el archivo
\texttt{rma.summary.txt}.

\subsection{Lectura de los datos}

La lectura de datos se lleva a cabo utilizando las clases y métodos
definidas en los paquetes \Rcode{Biobase} y \Rcode{affy} de
Bioconductor.

Una forma cómoda de leer los datos y, al mismo tiempo, asignar a cada
muestra los valores de las covariables (por ejemplo el grupo para el
analisis) consiste en crear un pequeño archivo de texto, que suele
denominarse \Rcode{targets.csv}. EL archivo targets para este caso
tiene el aspecto siguiente:

La tabla \ref{table.targets} muestra el contenido del archivo \texttt{targets.csv}
con la asignación de cada muestra a cada condición experimental.

{
 \tiny
<<phenoData1,echo=FALSE,results='asis'>>=
my.targets <-read.AnnotatedDataFrame(file=file.path("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A/dades","targets.FF.csv"), 
  header = TRUE, row.names = 1, sep="\t") 
 #rownames(pData(my.targets))<-  pData(my.targets)$ShortName
 stopifnot(require(xtable))
 x.big<-xtable(pData(my.targets),
   label="table.targets",
   caption="Archivo de asignación a cada muestra de su condición experimental"
   )
 print(x.big,tabular.environment="longtable",floating=FALSE)
@
}
\normalsize
<<esetCreate>>=
#se carga el archivo con los datos normalizados creados en "PreparaDades.R"
#%load(file=file.path("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A%%%%%/dades", "MicrosTGB_expressEG.Rda"))
#colnames(expresEG)<-rownames(my.targets)

anotacion<-read.csv(file=file.path("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A/dades","FF_annotations.csv"),sep="\t",header=TRUE)
dim(anotacion)#6658 5
head(anotacion)

#nos quedamos solo con los humanos
#anotacion.hg<-anotacion[anotacion$Species_Scientific_Name == "Homo sapiens",]
#dim(anotacion.hg)#6631 6
rownames(anotacion)<-anotacion$Probe.Set.ID
head(anotacion)

#se comprueban los uniques de Transcript_ID y se eliminan
#rownames(anotacion.hg)<-anotacion.hg$Transcript_ID
a<-as.vector(anotacion$Transcript.ID)
length(a)#6658
length(unique(a)) #6077
anotacion<-anotacion[!duplicated(anotacion[,4]),]

#nuevo data set de anotaciones: Probe.Set.ID + Transcript.ID
anota<-data.frame(anotacion$Transcript.ID,anotacion$Probe.Set.ID)
dim(anota)#6077 2
head(anota)
rownames(anota)<-anota$anotacion.Probe.Set.ID
colnames(anota)<-c("Transcript_ID","Probe_Set_ID")
head(anota)

#preparación archivo Rda
setwd("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A/dades")
x <-read.csv2("FF_rma.csv", row.names=1, sep="\t", dec=".")
head(x)
dim(x)#6658 10
targets <- read.csv2 ("targets.FF.csv",sep="\t")
colnames(x)<-targets$SampleName
head(x)
sample.names <- as.character(targets$ShortName)
save(x, targets, anota, file=file.path("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A/results","dades_FF.Rda"))


#merge x con anota#########################
expresEG <- merge(x,anota,by="row.names")
dim(expresEG)#6077 13
head(expresEG)
#rownames(expresEG)<-expresEG$Row.names
rownames(expresEG)<-expresEG$Transcript_ID
expresEG<-expresEG[,-c(1,12,13)]
dim(expresEG)#6077 10
head(expresEG)


save(expresEG, targets,anota, sample.names,  file=file.path("/home/rgonzalo/Documents/Estudis/2015-07-TeresaGarcia-VHIR-A/results","MicrosTGB_expressEG_FF.Rda"))




eset <- ExpressionSet(as.matrix(expresEG), phenoData=my.targets, annotation="micros")

#se definen las variables que se utilizaran en el PCA para diferenciar los grupos
ColoresArea<-pData(eset)$ColoresArea
pichArea<-pData(eset)$pchArea
ColoresMethod<-pData(eset)$ColoresMethod
pichMethod<-pData(eset)$pchMethod
@

\section{Exploración, Control de Calidad y Normalización}

Tras leer los datos pasamos al preprocesado.
Aunque puede interpretarse de distintas formas esta fase suele consistir en 
\begin{enumerate}
\item Realizar algunos gráficos con los datos para hacerse una idea de como ha resultado el experimento.
\item Realizar un control de calidad más formal.
\item Normalizar y, en el caso de Affymetrix, resumir las expresiones
\end{enumerate}

\subsection{Exploración y visualización}

La exploración previa puede hacerse paso a paso o en bloque si se utiliza algún paquete como
\Rpackage{arrayQualityMetrics}. En la ayuda de este paquete se encuentra una descripción de los análisis básicos que permite realizar.

El diagrama de cajas (\ref{fig:boxPlot}), como el histograma, da una idea de la distribución de los datos.

<<boxPlot,fig.cap="Intensity distribution of normalized data">>=
boxplot(exprs(eset),las=2, main="Intensity distribution of normalized data",cex.axis=0.5, col=ColoresArea,names=sample.names)
@
\noindent Como se puede observar en el gráfico la distribución de la intensidad entre las muestras es muy diferente, parece ser principalmente debido al método de conservación de las muestras (Tejido fresco = FF, Paraformaldehido= PFA, Parafinado= FFPE). Esto lo observaremos mejor en el cluster jerárquico y en el análisis de componentes principales.

<<plotBoxPtopdf,results='hide',echo=FALSE>>=
setwd(resultsDir)
pdf("BoxPlot_FF.pdf")
boxplot(exprs(eset),las=2, main="Intensity distribution of normalized data",cex.axis=0.5, col=ColoresArea,names=sample.names)
dev.off()
@

<<datosboxplot>>=
addToLinksFile(linksFileName,
               BoxplotFileName,
               categ = 'QC', 
               desc = "Boxplot of normalized data")
@  

Un cluster jerárquico seguido de un dendrograma nos puede ayudar a hacernos una idea
de si las muestras se agrupan por condiciones experimentales (\ref{fig:plotDendro}). 

Si lo hacen es bueno, pero si no, no es necesariamente indicador de problemas, 
puesto que es un gráfico basado en todos los datos.

<<plotDendro, fig.cap="Hierarchical clustering of samples">>=
### La muestras del mismo grupo deberían agruparse juntas
clust.euclid.average <- hclust(dist(t(exprs(eset))),method="average")
plot(clust.euclid.average, labels=sample.names, main="Hierarchical clustering of samples", cex=0.7,  hang=-1)
###
@

<<plotHClustopdf,results='hide',echo=FALSE>>=
setwd(resultsDir)
pdf("HClust_FF.pdf")
plot(clust.euclid.average, labels=sample.names, main="Hierarchical clustering of samples", cex=0.7,  hang=-1)
dev.off()
@

<<Hclustering>>=
addToLinksFile(linksFileName,
               HClusterFileName,
               categ = 'QC', 
               desc = "Hierarquical Clustering of normalized data")
@  

El gráfico anterior muestra una agrupación en tres grandes bloques: en el primero de ellos, y muy diferente de los otros dos, se agrupan las muestras conservadas en FFPE. Después hay un grupo donde parece que se agrupan las muestras de infarto (IC), mientras que en el otro gupo parecen agruparse las muestras procedentes de la zona contralateral (CL).

Otra forma de observar la agrupación de las muestras es realizar un Análisis de Componentes Principales (PCA). Se han realizado dos PCA, uno con los colores de las muestras definidos según el área del cerebro de la biopsia (\ref{fig:plotPCA2DArea}), y el otro según el método de conservación (\ref{fig:plotPCA2DMethod}),  de manera que se facilite la visualización de la agrupación de las muestras. Se puede observar en el PCA según el método de conservación (\ref{fig:plotPCA2DMethod}) que la principal fuente de variabilidad (primera componente, 46.2\% de variabilidad explicada)  es el método de conservación de la biopsia, agrupando las FFPE a un lado y el resto (PFA y FF) al otro lado. El segundo componente parece explicar el área dónde se ha extraído la biopsia (\ref{fig:plotPCA2DArea}), ya que parece haber agrupar las muestras de infarto (IC) a un lado y las otras al otro lado. Es importante comentar que el método de conservación en parafina (FFPE), enmascara totalmente el valor de la variable \texttt{Area}.

<<plotPCA, cache=TRUE,results='hide'>>=
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE, formapunts=NULL, myCex=0.8,...)
{
  pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
  loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
  xlab<-c(paste("PC1",loads[1],"%"))
  ylab<-c(paste("PC2",loads[2],"%"))
  if (is.null(colors)) colors=1
  plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors, pch=formapunts, 
       xlim=c(min(pcX$x[,1])-15, max(pcX$x[,1])+10))
  text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=myCex,col=colors)
  title(paste("Plot of first 2 PCs:", dataDesc, sep=" "), cex=0.8)
}
@ 

<<plotPCA2DArea,fig.cap="PCA plot of samples: 2 first principal components.">>=
plotPCA(exprs(eset), labels=sample.names, dataDesc="Colors by Area", colors=ColoresArea,formapunts=pichArea, myCex=0.6)
legend("topright", c("CL","IC"), col=c("green","red"),pch=c(1,2),cex=0.8)
@

<<plotPCAtopdfArea,results='hide',echo=FALSE>>=
setwd(resultsDir)
pdf("PCA_FF.pdf")
plotPCA(exprs(eset), labels=sample.names, dataDesc="Colors by Area (FF)", colors=ColoresArea,formapunts=pichArea, myCex=0.6)
legend("topright", c("CL","IC"), col=c("green","red"),pch=c(1,2),cex=0.8)
dev.off()
@

<<PCASx2>>=
addToLinksFile(linksFileName,
               PCAAreaFileName,
               categ = 'QC', 
               desc = "Principal Component Analysis for Area")
addToLinksFile(linksFileName,
               PCAMethodFileName,
               categ = 'QC', 
               desc = "Principal Component Analysis for Area")
@  

\subsection{Control de calidad}

El control de calidad consiste en una serie de gráficos que buscan sobretodo detectar variaciones excepcionales en los datos (``outliers'') suceptibles de ser eliminados del análisis.

El paquete \Rpackage{arrayQualityMetrics} encapsula los análisis que
pueden realizarse con distintos paquetes de forma que con una
instrucción se pueden realizar todos los análisis y enviar la salida a
un archivo.

<<arrayQCReport,result='hide',message=FALSE,cache=TRUE,warning=FALSE>>=
setwd(resultsDir)
stopifnot(require(arrayQualityMetrics))
arrayQualityMetrics(eset, reporttitle="QualityControl", force=TRUE)
@

<<QCReport>>=
addToLinksFile (linksFileName,
                 QCFileName,  
                  categ = 'QC',
                  desc = "Quality Control Plots of normalized data")
@ 


Como resultado de la ejecución se crea una carpeta \texttt{QualityControl} que contiene un archivo \texttt{index.html} que da acceso a todos gráficos de control de calidad. A este archivo se accede tambien desde el navegador de resultados. La interpretación de cada gráfico se lleva a cabo mediante la información disponible al pie de las figuras, pero, a modo de resumen puede afirmarse \emph{que los datos disponibles son de buena calidad y sin presencia de valores extremos}.

\subsubsection{PVCA}
En este apartado se ha usado el paquete \textit{PVCA} de \textit{Bioconductor}, el cual combina dos m\'etodos com\'unmente usados, el an\'alisis de componentes principales (PCA) y el an\'alisis de componentes de la varianza. Con esto podemos determinar cuales son las fuentes de variaci\'on que m\'as afectan, cuantificando la proporcion de variabilidad explicada por cada variable.

<<plotPVCA,fig.cap="PVCA plot of variable weight.",fig.height=4.5,fig.width=4.5,cache=TRUE>>=
setwd(resultsDir)
pct_threshold <- 0.6
batch.factors <- c("Gender","Area")
pvcaObj <- pvcaBatchAssess (eset, batch.factors, pct_threshold)


bp <- barplot(pvcaObj$dat, xlab = "Effects",
ylab = "Weighted average proportion variance",
ylim= c(0,1.1),col = c("blue"), las=2,
main="PVCA estimation bar chart")
axis(1, at = bp, labels = pvcaObj$label, xlab = "Effects", cex.axis = 0.7, las=2)
values = pvcaObj$dat
new_values = round(values , 3)
text(bp,pvcaObj$dat,labels = new_values, pos=3, cex = 0.8)
@

<<plotPVCA,results='hide',echo=FALSE>>=
setwd(resultsDir)
pdf("PVCA_FF.pdf")
bp <- barplot(pvcaObj$dat, xlab = "Effects",
ylab = "Weighted average proportion variance",
ylim= c(0,1.1),col = c("blue"), las=2,
main="PVCA estimation bar chart (FF)")
axis(1, at = bp, labels = pvcaObj$label, xlab = "Effects", cex.axis = 0.7, las=2)
values = pvcaObj$dat
new_values = round(values , 3)
text(bp,pvcaObj$dat,labels = new_values, pos=3, cex = 0.8)
dev.off()
@

Como se observa en la figura \ref{fig:plotPVCA} la variable \textit{Method} (forma de conservación de las biopsias) es la que explica más variabilidad de todas las que se han utilizado en el modelo. De todas maneras sigue quedando una gran cantidad (62\%)de variabilidad sin explicar.

Para concluir con esta seccion merece la pena tener en cuenta que todos estos graficos son exploratorios. Raramente se descarta un array si solo un grafico lo sugiere.

\subsection{Normalizacion y Filtraje}

Una vez realizado el control de calidad se puede realizarse un
filtraje no específico con el fin de eliminar genes que constituyen
básicamente ``ruído'', bien porque sus señales son muy bajas o bien
porque apenas varían entre condiciones, por lo que no aportan nada a
la selección de genes diferencialmente expresados.

\subsubsection{Filtraje}

El filtraje \emph{no específico} permite eliminar los genes que varían poco entre condiciones o que deseamos quitar por otras razones como por ejemplo que no disponemos de anotación para ellos. Este proceso permite eliminar los genes que, o bien varían poco, o bien no se dispone de anotación para ellos.

%La función \texttt{nsFilter} devuelve los valores filtrados en un objeto \texttt{expressionSet} y un informe de los resultados del filtraje. 

<<filtraje,echo=FALSE,results='hide'>>=
#stopifnot(require(genefilter))
#annotation(eset) <- "org.Hs.eg.db" # Ha de ser un paquet vàlid, però no ho fa servir
#eset_filtered <- nsFilter(eset, var.func=IQR,
 #        var.cutoff=0.5, var.filter=TRUE,
  #       filterByQuantile=TRUE)
#eset_filtered$filter.log$numLowVar#3419
#eset_filtered#3212
eset_filtered<-eset
@ 
En total en este estudio se han eliminado \textbf{3419} transcritos por considera que no variaban mínimamente entre condiciones lo que implica que no muestren expresión diferencial. Se continua trabajando con \textbf{3212} genes.

<<saveData>>=
save(eset, eset_filtered, file=file.path(resultsDir, "datos.normalizados_FF.Rda"))
@ 

\section{Selección de genes diferencialmente expresados}

Como en las etapas anteriores la selección de genes diferencialmente
expresados (GDE) puede basarse en distintas aproximaciones, desde la
$t$ de Student al programa SAM pasando por multitud de variantes.

En este ejemplo se aplicará la aproximación presentada por Smyth
\emph{et al.} (2004) basado en la utilización del \emph{modelo lineal
  general} combinada con un método para obtener una estimación
mejorada de la varianza.


\subsection{Análisis basado en modelos lineales}

La selección de genes diferecialmente expresados se ha basado en la
utilización de métodos similares al análisis de la varianza (ANOVA)
desarrollados explícitamente para el análisis de microarrays.

Dichos métodos, implementados en el paquete \Rpackage {limma} de
Bioconductor (\url{http://bioinf.wehi.edu.au/limma/},
\cite{Smyth:2004}), amplían el análisis tradicional utilizando modelos
de Bayes empíricos para combinar la información de toda la matriz de
datos y de cada gen individual y obtener estimaciones de error
mejoradas.

<<selectLimma, echo=FALSE>>=
require(Biobase)
#dif <- pData(eset)$Grupo
stopifnot(require(limma))
#lev<-factor(dif, levels=unique(dif))
#design <-model.matrix(~0+lev)

factArea <- as.factor(targets$Area)
factID <-as.factor(targets$Patient)
design <- model.matrix(~0+factID+factArea)

design
rownames(design)<-sample.names
print(design)

#colnames(design)<-levels(lev)
#rownames(design) <-rownames(targets)

@

\subsubsection{Comparaciones realizadas}

Los análisis estadísticos de microarrays suelen basarse en realizar
comparaciones o \emph{contrastes} entre condiciones
experimentales. Cada comparación genera una lista de genes que puede
estudiarse posteriormente de diversas formas.

Las comparaciones pueden agruparse en \emph{grupos de comparaciones}
que, no son más que comparaciones relacionadas, por ejemplo las
distintas dosis del mismo fármaco comparadas con el control. Dadas
varias comparaciones, que generan varias listas de genes se pueden
relacionar de diversas formas:
\begin{enumerate}
\item Podemos buscar en que difieren ambas listas, lo cual se
  realizará mediante un test estadístico (y una lista adicional),
\item Podemos buscar en que se parecen, es decir que genes aparecen en común en ambas listas. En este caso no realizaremos ningún test y tan sólo compararemos las listas. 
\end{enumerate}

En este caso interesa estudiar:
\begin{itemize}
\item Diferencias entre IC y CL para cada método de conservación.
  \begin{enumerate}
    \item IC.FF vs CL.FF = IC.FF - CL.FF
  \end{enumerate}
\end{itemize}

<<setContrasts>>=
require(limma)
comparison<-"FF"
cont.matrix1 <- makeContrasts (ICvsCL=factAreaIC,
                                levels=design)


fit1<-lmFit(eset, design)
fit.main1<-contrasts.fit(fit1, cont.matrix1)
fit.main1<-eBayes(fit.main1)


topTab_IC.FFvsCL.FF <-  topTable (fit.main1, number=nrow(fit.main1), adjust="fdr")
write.csv(topTab_IC.FFvsCL.FF, file=file.path(resultsDir, paste("Selected.Genes.in.comparison.ICvsCL.for.",comparison ,".csv", sep="")))

@


La tabla siguiente (\ref{topTable1}) muestra la cabecera de una de las
tablas resultantes del análisis. Las tablas completas se presentan en
archivos anexos a este informe.

<<showTable, echo=FALSE, results='asis'>>=
 stopifnot(require(xtable))
 x.big<-xtable(head(listOfTables[[1]]),
   label="topTable1",
   caption=paste("Cabecera de la tabla de resultados de la comparación ", names(listOfTables)[1], sep="")
)
 print(x.big,tabular.environment="longtable",floating=FALSE)
@ 

<<showTable2, echo=FALSE, results='asis'>>=
for (i in 1:length(listOfTables)){
write.csv(listOfTables[[i]], file=file.path(resultsDir, paste("Selected Genes in comparison ",names(listOfTables)[i],".csv", sep="")))
}
@
Una forma de visualizar los resultados es mediante un \texttt{volcano
  plot} que representa en abscisas los cambios de expresión en escala
logarítmica y en ordenadas el ``menos logaritmo'' del p-valor o
alternativamente el estadístico $B$. Cuanto más abierta está la figura mayor es el efecto biológico y cuanto más arriba estan los puntos (con valor positivo de B, mayor el estadístico).

La figura \ref{fig:volcano11} muestra uno de los ``volcanos'' (comparacion
''IC.FFvsCL.FF''). El resto se encuentran en el archivo
\texttt{Volcanos.pdf} accesible desde el archivo de resultados. 

Los que aparecen en las figuras números indican los identificadores
``Entrez'' de los genes más diferencialmente expresados.

<<volcano11,fig.cap="Volcano plot of IC.FFvsCL.FF comparison">>=

opt <- par(cex.lab = 0.7)
volcanoplot(fit.main1, highlight=10, names=fit.main1$ID, 
            main=paste("Differentially expressed genes FF",colnames(cont.matrix1), sep="\n"))
abline(v=c(-1,1))
par(opt)
@ 

<<volcanos2pdf,echo=FALSE,results='hide'>>=
pdf(file.path(resultsDir, "Volcano_FF.pdf"))
opt <- par(cex.lab = 0.7)
volcanoplot(fit.main1, highlight=10, names=fit.main1$ID, 
            main=paste("Differentially expressed genes FF",colnames(cont.matrix1), sep="\n"))
abline(v=c(-1,1))
dev.off()
@

\subsection{Comparaciones múltiples}

Cuando se realizan varias comparaciones a la vez puede resultar
importante ver que genes cambian simultáneamente en más de una
comparación.  Si el número de comparaciones es alto también puede ser
necesario realizar un ajuste de p-valores entre las comparaciones,
distinto del realizado entre genes.

% La función \texttt{decidetests} permite realizar ambas cosas.  
En este ejemplo no se ajustaran los p--valores entre
comparaciones. Tan sólo se seleccionaran los genes que cambian en una
o más condiciones.

EL resultado del análisis es una tabla \texttt{res} que para cada gen
y cada comparación contiene un 1 (si el gen esta sobre-expresado o
``up'' en esta condicion), un 0 (si no hay cambio significativo) o un
-1 (si esta ``down''-regulado) (\ref{decide1}, \ref{decide2}).

<<decideTests.1, echo=F>>=
res1<-decideTests(fit.main1, method="separate", adjust.method="fdr")
res2 <-decideTests(fit.main2, method="separate", adjust.method="fdr")
res3 <-decideTests(fit.main3, method="separate", adjust.method="fdr")
@

Para resumir dicho análisis podemos contar qué filas tienen como
mínimo una celda distinta de cero:

<<resumeDecideTests, results='asis'>>=
sum.res.rows1<-apply(abs(res1),1,sum)
res.selected1<-res1[sum.res.rows1!=0,]
print(xtable(summary(res1), label="decide1",caption=paste("Genes seleccionados (p-valor ajustado $< 0.05$) en las comparaciones ", comparison1, sep="")))

sum.res.rows2<-apply(abs(res2),1,sum)
res.selected2<-res2[sum.res.rows2!=0,]
print(xtable(summary(res2), label="decide2", caption=paste("Genes seleccionados  (p-valor ajustado $< 0.05$) en las comparaciones ", comparison2, sep="")))

sum.res.rows3<-apply(abs(res3),1,sum)
res.selected3<-res3[sum.res.rows3!=0,]
print(xtable(summary(res3), label="decide3", caption=paste("Genes seleccionados  (p-valor ajustado $< 0.05$) en las comparaciones ", comparison3, sep="")))
@


<<anotaciones,message=FALSE,results='hide'>>=
#comp1
#conanotaComp1<-merge(res.selected1,anota,by="row.names")
conanotaComp1<-res.selected1
head(conanotaComp1)
#rownames(conanotaComp1)<-conanotaComp1$Row.names
#conanotaComp1<-conanotaComp1[,-1]
#conanotaComp1<-conanotaComp1[c(4,1,2,3)]
multComp1FileName <- paste("Common_Genes", comparison1, "csv", sep=".")
write.csv(conanotaComp1, file=file.path(resultsDir, multComp1FileName))

#comp2
#conanotaComp2<-merge(res.selected2,anota,by="row.names")
conanotaComp2<-res.selected2
#rownames(conanotaComp2)<-conanotaComp2$Row.names
#conanotaComp2<-conanotaComp2[,-1]
#conanotaComp2<-conanotaComp2[c(4,1,2,3)]
multComp2FileName <- paste("Common_Genes", comparison2, "csv", sep=".")
write.csv(conanotaComp2, file=file.path(resultsDir, multComp2FileName))

#comp3
#conanotaComp3<-merge(res.selected3,anota,by="row.names")
conanotaComp3<-res.selected3
#head(conanotaComp3)
#rownames(conanotaComp3)<-conanotaComp3$Row.names
#conanotaComp3<-conanotaComp3[,-1]
#conanotaComp3<-conanotaComp3[c(4,1,2,3)]
multComp3FileName <- paste("Common_Genes", comparison3, "csv", sep=".")
write.csv(conanotaComp3, file=file.path(resultsDir, multComp3FileName))
@ 

<<links2MultipleComparisons>>=
addToLinksFile (linksFileName,
                multComp1FileName,  
                categ = 'ANALYSIS',
                desc = paste("Common and distinct genes selected in", comparison1, "comparisons", sep=" ")
                )

addToLinksFile (linksFileName,
                multComp2FileName,  
                categ = 'ANALYSIS',
                desc = paste("Common and distinct genes selected in", comparison2, "comparisons", sep=" ")
                )
addToLinksFile (linksFileName,
                multComp3FileName,  
                categ = 'ANALYSIS',
                desc = paste("Common and distinct genes selected in", comparison2, "comparisons", sep=" ")
                )
@ 


Un diagrama de Venn permite visualizar la tabla anterior sin diferenciar entre genes ``up'' o ``down'' regulados \ref{fig:venn2screen1}, \ref{fig:venn2screen2}.

<<hola>>=
setwd(resultsDir)
require(VennDiagram)
###ICvsCL
venn.diagram(  
   x = list(
             IC.FFvsCL.FF = which(res.selected1[,1] !=0),
             IC.FFPEvsCL.FFPE = which(res.selected1[,2] !=0),
             IC.PFAvsCL.PFA = which(res.selected1[,3] !=0)),
        main=paste ("Genes in common: ",comparison1),
        #sub="with pValue<0.05 & FC>=1",
    filename="Venn.ICvsCL.tif",
    resolution=600,
        lwd = 3,
        fill=c("red","blue","green"),
        alpha = 0.65,
        label.col = "black",
    col="transparent",
        cex = 1.5,
        fontfamily = "serif",
        fontface = "bold",
        cat.col = c("red","blue","green"),
        cat.cex = 1,
        cat.fontfamily = "serif",
        cat.fontface = "bold",
        cat.dist = c(0.06, 0.04,0.04),#(distancia del nom de comparació al venn
        cat.pos = c(-35,20,155),#per noms de les comparacions al venn(en graus)
    main.cex=1.7,
    main.fontface="bold",
    main.fontfamily="serif",
    sub.cex=1.3,
    sub.fontface="bold",
    sub.fontfamily="serif"
        )
###Methods_CL
venn.diagram(  
   x = list(
             CL.FFPEvsCL.FF = which(res.selected2[,1] !=0),
             CL.PFAvsCL.FF = which(res.selected2[,2] !=0),
             CL.PFAvsCL.FFPE = which(res.selected2[,3] !=0)),
        main=paste ("Genes in common: ",comparison2),
        #sub="with pValue<0.05 & FC>=1",
    filename="Venn.Methods_CL.tif",
    resolution=600,
        lwd = 3,
        fill=c("red","blue","green"),
        alpha = 0.65,
        label.col = "black",
    col="transparent",
        cex = 1.5,
        fontfamily = "serif",
        fontface = "bold",
        cat.col = c("red","blue","green"),
        cat.cex = 1,
        cat.fontfamily = "serif",
        cat.fontface = "bold",
        cat.dist = c(0.06, 0.04,0.04),#(distancia del nom de comparació al venn
        cat.pos = c(-35,20,155),#per noms de les comparacions al venn(en graus)
    main.cex=1.7,
    main.fontface="bold",
    main.fontfamily="serif",
    sub.cex=1.3,
    sub.fontface="bold",
    sub.fontfamily="serif"
        )

###Methods_IC
venn.diagram(  
   x = list(
             IC.FFPEvsIC.FF = which(res.selected3[,1] !=0),
             IC.PFAvsIC.FF = which(res.selected3[,2] !=0),
             IC.PFAvsIC.FFPE = which(res.selected3[,3] !=0)),
        main=paste ("Genes in common: ",comparison3),
        #sub="with pValue<0.05 & FC>=1",
    filename="Venn.Methods_IC.tif",
    resolution=600,
        lwd = 3,
        fill=c("red","blue","green"),
        alpha = 0.65,
        label.col = "black",
    col="transparent",
        cex = 1.5,
        fontfamily = "serif",
        fontface = "bold",
        cat.col = c("red","blue","green"),
        cat.cex = 1,
        cat.fontfamily = "serif",
        cat.fontface = "bold",
        cat.dist = c(0.06, 0.04,0.04),#(distancia del nom de comparació al venn
        cat.pos = c(-15,20,165),#per noms de les comparacions al venn(en graus)
    main.cex=1.7,
    main.fontface="bold",
    main.fontfamily="serif",
    sub.cex=1.3,
    sub.fontface="bold",
    sub.fontfamily="serif"
        )
@

<<venn2screen1,figure.show='asis',fig.width=4.8,fig.height=4.8,fig.cap="Venn Diagram for ICvsCL comparison">>=
###ICvsCL
venn.diagram(  
   x = list(
             IC.FFvsCL.FF = which(res.selected1[,1] !=0),
             IC.FFPEvsCL.FFPE = which(res.selected1[,2] !=0),
             IC.PFAvsCL.PFA = which(res.selected1[,3] !=0)),
        main=paste ("Genes in common: ",comparison1),
        #sub="with pValue<0.05 & FC>=1",
    filename=NULL,
    resolution=600,
        lwd = 3,
        fill=c("red","blue","green"),
        alpha = 0.65,
        label.col = "black",
    col="transparent",
        cex = 1.5,
        fontfamily = "serif",
        fontface = "bold",
        cat.col = c("red","blue","green"),
        cat.cex = 1,
        cat.fontfamily = "serif",
        cat.fontface = "bold",
        cat.dist = c(0.06, 0.04,0.04),#(distancia del nom de comparació al venn
        cat.pos = c(-35,20,155),#per noms de les comparacions al venn(en graus)
    main.cex=1.7,
    main.fontface="bold",
    main.fontfamily="serif",
    sub.cex=1.3,
    sub.fontface="bold",
    sub.fontfamily="serif"
        )
grid.draw(venn.ICvsCL9)
@ 

<<venn2screen1,figure.show='asis',fig.width=4.8,fig.height=4.8,fig.cap="Venn Diagram for Methods_CL comparison">>=
###Methods_CL
venn.diagram(  
   x = list(
             CL.FFPEvsCL.FF = which(res.selected2[,1] !=0),
             CL.PFAvsCL.FF = which(res.selected2[,2] !=0),
             CL.PFAvsCL.FFPE = which(res.selected2[,3] !=0)),
        main=paste ("Genes in common: ",comparison2),
        #sub="with pValue<0.05 & FC>=1",
    filename=NULL,
    resolution=600,
        lwd = 3,
        fill=c("red","blue","green"),
        alpha = 0.65,
        label.col = "black",
    col="transparent",
        cex = 1.5,
        fontfamily = "serif",
        fontface = "bold",
        cat.col = c("red","blue","green"),
        cat.cex = 1,
        cat.fontfamily = "serif",
        cat.fontface = "bold",
        cat.dist = c(0.06, 0.04,0.04),#(distancia del nom de comparació al venn
        cat.pos = c(-35,20,155),#per noms de les comparacions al venn(en graus)
    main.cex=1.7,
    main.fontface="bold",
    main.fontfamily="serif",
    sub.cex=1.3,
    sub.fontface="bold",
    sub.fontfamily="serif"
        )
grid.draw(venn.Methods_CL)
@ 

<<venn2screen1,figure.show='asis',fig.width=4.8,fig.height=4.8,fig.cap="Venn Diagram for ethods_IC comparison">>=
###Methods_IC
venn.diagram(  
   x = list(
             IC.FFPEvsIC.FF = which(res.selected3[,1] !=0),
             IC.PFAvsIC.FF = which(res.selected3[,2] !=0),
             IC.PFAvsIC.FFPE = which(res.selected3[,3] !=0)),
        main=paste ("Genes in common: ",comparison3),
        #sub="with pValue<0.05 & FC>=1",
    filename=NULL,
    resolution=600,
        lwd = 3,
        fill=c("red","blue","green"),
        alpha = 0.65,
        label.col = "black",
    col="transparent",
        cex = 1.5,
        fontfamily = "serif",
        fontface = "bold",
        cat.col = c("red","blue","green"),
        cat.cex = 1,
        cat.fontfamily = "serif",
        cat.fontface = "bold",
        cat.dist = c(0.06, 0.04,0.04),#(distancia del nom de comparació al venn
        cat.pos = c(-15,20,165),#per noms de les comparacions al venn(en graus)
    main.cex=1.7,
    main.fontface="bold",
    main.fontfamily="serif",
    sub.cex=1.3,
    sub.fontface="bold",
    sub.fontfamily="serif"
        )
grid.draw(venn.ethods_IC)
@ 

\subsubsection{Archivos de resultados con tablas hiperenlazables}
Para cada comparacion se genera un archivo HTML que contiene la
\texttt{topTable} generada en la selección de genes DE junto con las
anotaciones -cuando esten disponibles- de los transcritos en las bases
de datos ``Entrez Gene'' y ``Gene Symbols''. Algunos tránscritos no
disponen de anotaciones aunque esto suele ser debido a que forman
parte de un ``cluster de transcritos'' indicado por un segundo número
al final del identificador.
%%%%%%%%%%
%%%%%%%%%%NO FUNCIONA :()
<<htmlPages>>=
for (i in 1:length(listOfTables)){
  # Seleccionamos la "topTable"
  topTab <- listOfTables[[i]]
      #Afegit per ricardo (no existia columna ID en topTab)
     topTab$ID <- rownames(topTab)
     rownames(topTab)=NULL
     topTab <- topTab[c("ID","logFC","AveExpr","t","P.Value","adj.P.Val","B")]
  # Escogemos los grupos de sondas a incluir en la tabla
  whichGenes <-(topTab["adj.P.Val"]<1) # & (abs(topTab["logFC"]) > 1)
  selectedIDs <- topTab$ID[whichGenes]
  # Los convertimos a identificadores Entrez ("EG") y a Gene Symbols
  #genes<- EG[selectedIDs]
  #simbols <-Simbols[selectedIDs]
  simbols<-anota[anota$Transcript_ID]
  # Haremos la columna de Entrez sea hiperenlazable
  paraEnlace <- list (misgenes=simbols)
  # Preparamos el data.frame con el que se creará el archivo de resultados
  otherNames = data.frame(selectedIDs, simbols, topTab[whichGenes,-1])
  names(otherNames) = c("Affy ID", colnames(topTab)[-1])
  # Invocamos la función "htmlpage"
  comparison <- names(listOfTables)[i]
  resFileName =file.path(resultsDir, 
           paste("Selected Genes in comparison ",comparison,".html", sep=""))
  htmlpage(paraEnlace, 
           resFileName , 
           title = paste("Diff. expressed genes in comparison ", comparison, sep=""), 
           othernames = otherNames, 
           table.head = c("Entrez IDs", names(otherNames)),
           table.center = TRUE, 
           repository=list("en"))
  write.csv(otherNames, row.names=FALSE,file=file.path(resultsDir, 
           paste("Selected Genes in comparison ",comparison,".csv", sep="")))
}
@ 


\subsection{Visualización de los perfiles de expresión}

Tras seleccionar los genes diferencialmente expresados podemos
visualizar las expresiones de cada gen agrupándolas para destacar los
genes que se encuentran up o down regulados simultáneamente
constituyendo \emph{perfiles de expresión}.

Hay distintas formas de visualización pero aquí tan sólo se presenta
el uso de mapas de color o \texttt{Heatmaps} \ref{fig:heat1},\ref{fig:heat2}.

En primer lugar seleccionamos los genes visualizar: Se toman todos
aquellos que han resultado diferencialmente expresados en alguna de
las tres comparaciones.

<<HMComp1,message=FALSE,results='hide'>>=
probeNames1<-rownames(res1)
probeNames.selected1<-probeNames1[sum.res.rows1!=0]
exprs2cluster1 <-exprs(eset)[probeNames.selected1,c(1:18,23:33,37:42,46:49)]

setwd(resultsDir)
my_palette <- colorRampPalette(c("blue", "red"))(n = 299) # creates a own color palette from red to green
pdf("heatmap1.pdf")
heatmap.2(exprs2cluster1,
          Rowv=TRUE,
          #Colv=FALSE,
          main="HeatMap ICvsCL. pValue<0.05",
          scale="row",
          col=my_palette,
          sepcolor="white",
          sepwidth=c(0.05,0.05),
          cexRow=0.5,
          cexCol=0.9,
          key=TRUE,
          keysize=1.5,
          density.info="histogram",
         # ColSideColors=c("green","green","blue","blue","red","red"),
          tracecol=NULL,
          srtCol=30)
dev.off()
@



\subsection{Significación biológica de los resultados}

\end{document}